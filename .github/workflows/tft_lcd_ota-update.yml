name: Build and Release Halo TFT LCD Firmware

env:
  DEVICE_NAME: halo

on:
  push:
    paths:
      - 'TFT_LCD/**'
  workflow_dispatch:
    inputs:
      version:
        description: 'The version of the firmware to build'
        required: true
  release:
    types: [published]

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    if: github.event_name == 'push'  # Only create a release on push
    permissions:
      contents: write  # Ensure permissions for writing to the repo
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4.1.7

      - name: Get Version
        id: get_version
        run: |
          if [ -f "TFT_LCD/T-Display-Long/V1/Firmware/ESPHome/Halo-v1-Core.yaml" ]; then
            version=$(awk '/substitutions:/ {found=1} found && /version:/ {print $2; exit}' TFT_LCD/T-Display-Long/V1/Firmware/ESPHome/Halo-v1-Core.yaml | tr -d '"')
            if [ -n "$version" ]; then
              echo "project_version=$version" >> $GITHUB_ENV
              echo "Version extracted: $version"
            else
              echo "Error: Could not extract version from file"
              exit 1
            fi
          else
            echo "Error: Core file not found"
            exit 1
          fi

      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}  # Use PAT for authentication
        with:
          tag_name: ${{ env.project_version }}
          release_name: "Release ${{ env.project_version }}"
          draft: false
          prerelease: false
          body: "Auto-generated release from GitHub Actions."

  build-firmware:
    name: Build And Release
    needs: [create-release, build-site]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4.1.7
        
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          
      - name: Install ESPHome
        run: |
          pip install esphome
          
      - name: Build Firmware
        run: |
          cd TFT_LCD/T-Display-Long/V1/Firmware/ESPHome
          esphome compile Halo-v1.yaml
          echo "Build completed. Checking for firmware files..."
          find .esphome/build -name "*.bin" -type f
          
      - name: Debug - Show Build Directory
        run: |
          cd TFT_LCD/T-Display-Long/V1/Firmware/ESPHome
          echo "Build directory structure:"
          ls -la .esphome/ || echo "No .esphome directory found"
          ls -la .esphome/build/ || echo "No build directory found"
          if [ -d ".esphome/build" ]; then
            echo "Build subdirectories:"
            ls -la .esphome/build/
            for dir in .esphome/build/*/; do
              if [ -d "$dir" ]; then
                echo "Contents of $dir:"
                ls -la "$dir"
                if [ -d "$dir.pioenvs" ]; then
                  echo "Contents of $dir.pioenvs:"
                  ls -la "$dir.pioenvs"
                  for pio_dir in "$dir.pioenvs"/*/; do
                    if [ -d "$pio_dir" ]; then
                      echo "Contents of $pio_dir:"
                      ls -la "$pio_dir"
                    fi
                  done
                fi
              fi
            done
          fi
          
      - name: Upload Firmware Artifact
        uses: actions/upload-artifact@v4.3.6
        with:
          name: firmware-tft
          path: |
            TFT_LCD/T-Display-Long/V1/Firmware/ESPHome/.esphome/build/*/.pioenvs/*/firmware.factory.bin
            TFT_LCD/T-Display-Long/V1/Firmware/ESPHome/.esphome/build/*/.pioenvs/*/firmware.bin
            TFT_LCD/T-Display-Long/V1/Firmware/ESPHome/.esphome/build/*/*.bin
          if-no-files-found: error

  build-site:
    name: Build Site
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source code
        uses: actions/checkout@v4.1.7

      - name: Build Site
        uses: actions/jekyll-build-pages@v1.0.13
        with:
          source: ./static
          destination: ./output

      - name: Upload Site Artifact
        uses: actions/upload-artifact@v4.3.6
        with:
          name: site
          path: output

  publish:
    name: Publish to GitHub Pages
    runs-on: ubuntu-latest
    needs:
      - build-firmware
      - build-site
    permissions:
      pages: write
      id-token: write
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Download Firmware Artifact
        uses: actions/download-artifact@v4.1.8
        with:
          name: firmware-tft
          path: firmware

      - name: Check Firmware Artifacts
        run: |
          echo "Checking firmware artifacts..."
          ls -la firmware/ || echo "No firmware directory found"
          if [ -d "firmware" ]; then
            echo "Firmware files found:"
            find firmware -type f
          else
            echo "No firmware artifacts downloaded"
            exit 1
          fi

      - name: Copy Firmware and Manifest
        run: |-
          mkdir -p output/firmware
          cp -r firmware/* output/firmware/

      - name: Download Site Artifact
        uses: actions/download-artifact@v4.1.8
        with:
          name: site
          path: output

      - name: Upload Pages Artifact
        uses: actions/upload-pages-artifact@v3.0.1
        with:
          path: output
          retention-days: 1

      - name: Setup Pages
        uses: actions/configure-pages@v5.0.0

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4.0.5
