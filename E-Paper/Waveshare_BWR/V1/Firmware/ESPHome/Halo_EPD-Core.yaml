#Define Project
substitutions:
  name: halo-epd
  version: "25.8.23.2"
  device_description: ${name} - v${version}.

esp32:
  variant: esp32s3
  board: esp32-s3-devkitc-1
  flash_size: 4MB
  framework:
    type: esp-idf
    version: latest
    platform_version: 6.9.0
    version: 5.3.1

psram:
  mode: octal
  speed: 80MHz

external_components:
  source: github://pr#6226
  components: [waveshare_epaper]

# Enable logging
logger:
  level: DEBUG

web_server:
  port: 80  

# Enable Home Assistant API
api:
  on_client_connected:
      - delay: 1s
      - light.turn_off: rgb_light
      - lambda: 'id(cycleCounter) = 30;'    
  services:
    #Co2 Calibration Service
    - service: calibrate_co2_value
      variables:
        co2_ppm: float
      then:
        - scd4x.perform_forced_calibration:
            value: !lambda "return co2_ppm;"
            id: scd40
    - service: sen55_clean
      then:
        - sen5x.start_fan_autoclean: sen55    

captive_portal:

globals:
  - id: cycleCounter
    type: int
    restore_value: no
    initial_value: '0'
  - id: temp_unit_changed
    type: bool
    initial_value: "true"

switch:
  - platform: template
    name: "Startup Light Blink"
    id: startup_light_blink
    icon: mdi:lightbulb
    restore_mode: RESTORE_DEFAULT_ON
    optimistic: true
    entity_category: "config"
  - platform: template
    name: "24h Clock Format"
    id: time_format
    icon: mdi:clock-digital
    restore_mode: RESTORE_DEFAULT_OFF
    optimistic: true
    entity_category: "config"

select:
  - platform: template
    name: Display Temperature Unit
    id: display_temperature_unit
    entity_category: "Config"
    options:
     - "Fahrenheit"
     - "Celsius"
     - "Kelvin"
    initial_option: "Fahrenheit"
    restore_value: true
    optimistic: true
    on_value:
      - globals.set:
          id: temp_unit_changed
          value: "true"

interval:
  - interval: 10s
    then:    
      if:
        condition:
          wifi.connected:
        then:
          - lvgl.widget.update:
              id: wifi_stat
              text_color: my_black
          - lvgl.widget.show:
              id: ym_image              
        else:
          - lvgl.widget.update:
              id: wifi_stat
              text_color: my_red

  - interval: 1s
    then:
      - script.execute: time_update  

  - interval: 1s
    then:
      - if:
          condition:
            - binary_sensor.is_off: ink_ha_connected
            - lambda: 'return id(cycleCounter) < 30;'
            - switch.is_on: startup_light_blink

          then:
            - light.turn_on:
                id: rgb_light
                effect: "Rainbow Effect"
            - lambda: 'id(cycleCounter) += 1;'

  - interval: 1s
    then:
      - if:
          condition:
            - binary_sensor.is_off: ink_ha_connected
            - lambda: 'return id(cycleCounter) > 30;'
            - lambda: 'return id(cycleCounter) < 31;'
            - switch.is_on: startup_light_blink

          then:
            - light.turn_off:
                id: rgb_light
            - lambda: 'id(cycleCounter) += 1;' 

spi:  
  id: display_spi
  mosi_pin: GPIO6
  clk_pin: GPIO5

i2c:
  - sda: GPIO8
    scl: GPIO7
    id: lily_i2c

display:
  - platform: waveshare_epaper
    id: epaper_display
    model: 2.90in3c
    cs_pin: GPIO4
    dc_pin: GPIO3
    reset_pin: GPIO2
    busy_pin: GPIO1
    reset_duration: 2ms
    update_interval: 30s

font:
  - file: 'gfonts://Roboto'
    id: roboto12
    size: 12
    bpp: 1
  - file: 'gfonts://Rubik@500'
    id: rubik524
    size: 24
    bpp: 1
  - file: 'gfonts://Rubik@500'
    id: rubik414
    size: 14        
    bpp: 1
  - file: 'gfonts://Lato@700'
    id: lato424
    bpp: 1
    size: 24              

color:
  - id: my_black
    hex: "FFFFFF"
  - id: my_red
    hex: "FF0000"
  - id: my_white
    hex: "000000"  


time:
  - platform: homeassistant
    id: ha_time
    on_time_sync:
      - script.execute: time_update

script:
  - id: time_update
    then:
      - lvgl.label.update:
          id: timeVal
          text: !lambda |-
            static char time_buf[17];
            auto now = id(ha_time).now();
            bool is_pm = now.hour >= 12;
            int hour_12 = now.hour % 12;
            if (hour_12 == 0) {
              hour_12 = 12; // 12 AM/PM should be displayed as 12, not 0
            }
            if(id(time_format).state) {
              snprintf(time_buf, sizeof(time_buf), "%02d:%02d", now.hour, now.minute);
            }
            else {
              snprintf(time_buf, sizeof(time_buf), "%2d:%02d%s", hour_12, now.minute, is_pm ? "PM" : "AM");
            }
            return time_buf;

number:
  - platform: template
    name: SEN55 Temperature Offset
    id: sen55_temperature_offset
    restore_value: true
    initial_value: 6.0
    min_value: -70.0
    max_value: 70.0
    entity_category: "CONFIG"
    unit_of_measurement: "Â°C"
    optimistic: true
    update_interval: never
    step: 0.1
    mode: box
  - platform: template
    name: SEN55 Humidity Offset
    id: sen55_humidity_offset
    restore_value: true
    initial_value: 0
    min_value: -70.0
    max_value: 70.0
    entity_category: "CONFIG"
    unit_of_measurement: "%"
    optimistic: true
    update_interval: never
    step: 0.1
    mode: box

binary_sensor:
  - platform: status
    name: Online
    id: ink_ha_connected    

sensor:
  - platform: uptime
    name: Uptime
    id: sys_uptime
    update_interval: 60s

  - platform: wifi_signal
    name: RSSI
    id: wifi_signal_db
    update_interval: 60s
    entity_category: "diagnostic"
      
  - platform: scd4x
    id: scd40
    co2:
      name: "CO2"
      id: "co2"
      on_value:
        then:
          - lvgl.label.update:
              id: co2_value
              text: !lambda |-
                static char buffer[10];
                snprintf(buffer, sizeof(buffer), "%d", (int)x);
                return buffer;
          - if:
              condition:
                lambda: "return x <= 1000;"
              then:
                - lvgl.label.update:
                    id: co2_value
                    text_color: my_black                     
              else:
                - lvgl.label.update:
                    id: co2_value
                    text_color: my_red                                                                                                      
    automatic_self_calibration: false
    update_interval: 10s
    measurement_mode: "periodic"
    i2c_id: lily_i2c
    ambient_pressure_compensation_source: bme280pressure

  - platform: mics_4514
    id: mics4514
    nitrogen_dioxide:
      name: Nitrogen Dioxide
      # id: "no2"
      # on_value:
      #   then:
      #     - lvgl.label.update:
      #         id: no2_value
      #         text: !lambda |-
      #           static char buffer[10];
      #           snprintf(buffer, sizeof(buffer), "%.02f", x);
      #           return buffer;
      #     - if:
      #         condition:
      #           lambda: "return x <= 0.2;"  # Safe level typical indoors (ppm)
      #         then:
      #           - lvgl.label.update:
      #               id: no2_value
      #               text_color: my_black
      #         else:
      #           - lvgl.label.update:
      #               id: no2_value
      #               text_color: my_red                        
    carbon_monoxide:
      name: Carbon Monoxide
      id: "co"
      on_value:
        then:
          - lvgl.label.update:
              id: co_value
              text: !lambda |-
                static char buffer[10];
                snprintf(buffer, sizeof(buffer), "%.02f", x);
                return buffer;
          - if:
              condition:
                lambda: "return x <= 15;"
              then:
                - lvgl.label.update:
                    id: co_value
                    text_color: my_black
              else:
                - lvgl.label.update:
                    id: co_value
                    text_color: my_red                    
    hydrogen:
      name: Hydrogen
      # id: "h2"
      # on_value:
      #   then:
      #     - lvgl.label.update:
      #         id: h2_value
      #         text: !lambda |-
      #           static char buffer[10];
      #           snprintf(buffer, sizeof(buffer), "%.02f", x);
      #           return buffer;
      #     - if:
      #         condition:
      #           lambda: "return x <= 0.4;"  # Safe level typical indoors
      #         then:
      #           - lvgl.label.update:
      #               id: h2_value
      #               text_color: my_black
      #         else:
      #           - lvgl.label.update:
      #               id: h2_value
      #               text_color: my_red

    methane:
      name: Methane
      # id: "ch4"
      # on_value:
      #   then:
      #     - lvgl.label.update:
      #         id: ch4_value
      #         text: !lambda |-
      #           static char buffer[10];
      #           snprintf(buffer, sizeof(buffer), "%.02f", x);
      #           return buffer;
      #     - if:
      #         condition:
      #           lambda: "return x <= 2.0;"  # Typical safe level
      #         then:
      #           - lvgl.label.update:
      #               id: ch4_value
      #               text_color: my_black
      #         else:
      #           - lvgl.label.update:
      #               id: ch4_value
      #               text_color: my_red
                                      
    ethanol:
      name: Ethanol
      # id: "ethanol"
      # on_value:
      #   then:
      #     - lvgl.label.update:
      #         id: ethanol_value
      #         text: !lambda |-
      #           static char buffer[10];
      #           snprintf(buffer, sizeof(buffer), "%.02f", x);
      #           return buffer;
      #     - if:
      #         condition:
      #           lambda: "return x <= 1.5;"  # Safe level
      #         then:
      #           - lvgl.label.update:
      #               id: ethanol_value
      #               text_color: my_black
      #         else:
      #           - lvgl.label.update:
      #               id: ethanol_value
      #               text_color: my_red
                    
    ammonia:
      name: Ammonia
      # id: "nh3"
      # on_value:
      #   then:
      #     - lvgl.label.update:
      #         id: nh3_value
      #         text: !lambda |-
      #           static char buffer[10];
      #           snprintf(buffer, sizeof(buffer), "%.02f", x);
      #           return buffer;
      #     - if:
      #         condition:
      #           lambda: "return x <= 1.0;"  # Safe level typical indoors
      #         then:
      #           - lvgl.label.update:
      #               id: nh3_value
      #               text_color: my_black
      #         else:
      #           - lvgl.label.update:
      #               id: nh3_value
      #               text_color: my_red
                            
    update_interval: 10s
    i2c_id: lily_i2c
    address: 0x75

  - platform: bme280_i2c
    i2c_id: lily_i2c
    temperature:
      name: "BME280 Temperature"
      oversampling: 2x 
    pressure:
      name: "BME280 Pressure"
      id: bme280pressure
    humidity:
      name: "BME280 Humidity"    

  - platform: sen5x
    id: sen55
    pm_1_0:
      name: "PM <1Âµm Weight concentration"
      id: pm_1_0
      accuracy_decimals: 1
      # on_value:
      #   then:
      #     - lvgl.label.update:
      #         id: pm1_value
      #         text: !lambda |-
      #           static char buffer[10];
      #           snprintf(buffer, sizeof(buffer), "%.01f", x);
      #           return buffer;          
    pm_2_5:
      name: "PM <2.5Âµm Weight concentration"
      id: pm_2_5
      accuracy_decimals: 1
      on_value:
        then:
          - lvgl.label.update:
              id: pm25_value
              text: !lambda |-
                static char buffer[10];
                snprintf(buffer, sizeof(buffer), "%.01f", x);
                return buffer;
          - lvgl.label.update:
              id: aqi_value
              text: !lambda |-
                float val = x; // PM2.5 value
                float aqi = 0.0;

                if (val <= 9.0) {
                  aqi = ((50.0 - 0.0) / (9.0 - 0.0)) * (val - 0.0) + 0.0;
                } else if (val <= 35.4) {
                  aqi = ((100.0 - 51.0) / (35.4 - 9.1)) * (val - 9.1) + 51.0;
                } else if (val <= 55.4) {
                  aqi = ((150.0 - 101.0) / (55.4 - 35.5)) * (val - 35.5) + 101.0;
                } else if (val <= 125.4) {
                  aqi = ((200.0 - 151.0) / (125.4 - 55.5)) * (val - 55.5) + 151.0;
                } else if (val <= 225.4) {
                  aqi = ((300.0 - 201.0) / (225.4 - 125.5)) * (val - 125.5) + 201.0;
                } else if (val <= 500.4) {
                  aqi = ((500.0 - 301.0) / (500.4 - 250.5)) * (val - 250.5) + 301.0;
                } else {
                  return "EVAC";
                }

                static char buffer[10];
                snprintf(buffer, sizeof(buffer), " %d", (int)aqi);
                return buffer;

          - lvgl.widget.update:
              id: aqi_widget
              bg_color: !lambda |-
                float val = x; // PM2.5 value
                float aqi = 0.0;

                if (val <= 9.0) {
                  aqi = ((50.0 - 0.0) / (9.0 - 0.0)) * (val - 0.0) + 0.0;
                } else if (val <= 35.4) {
                  aqi = ((100.0 - 51.0) / (35.4 - 9.1)) * (val - 9.1) + 51.0;
                } else if (val <= 55.4) {
                  aqi = ((150.0 - 101.0) / (55.4 - 35.5)) * (val - 35.5) + 101.0;
                } else if (val <= 125.4) {
                  aqi = ((200.0 - 151.0) / (125.4 - 55.5)) * (val - 55.5) + 151.0;
                } else if (val <= 225.4) {
                  aqi = ((300.0 - 201.0) / (225.4 - 125.5)) * (val - 125.5) + 201.0;
                } else if (val <= 500.4) {
                  aqi = ((500.0 - 301.0) / (500.4 - 250.5)) * (val - 250.5) + 301.0;
                } else {
                  aqi = 500.0;
                }

                // Return color based on AQI
                if (aqi <= 50) {
                  return lv_color_hex(0x76fa76); // Green
                } else if (aqi <= 100) {
                  return lv_color_hex(0xFFFF00); // Yellow
                } else if (aqi <= 150) {
                  return lv_color_hex(0xFFA500); // Orange
                } else if (aqi <= 200) {
                  return lv_color_hex(0xFF0000); // Red
                } else if (aqi <= 300) {
                  return lv_color_hex(0x800080); // Purple
                } else {
                  return lv_color_hex(0x800000); // Maroon
                }        

    pm_4_0:
      name: "PM <4Âµm Weight concentration"
      id: pm_4_0
      accuracy_decimals: 1
      # on_value:
      #   then:
      #     - lvgl.label.update:
      #         id: pm4_value
      #         text: !lambda |-
      #           static char buffer[10];
      #           snprintf(buffer, sizeof(buffer), "%.01f", x);
      #           return buffer;       
    pm_10_0:
      name: "PM <10Âµm Weight concentration"
      id: pm_10_0
      accuracy_decimals: 1
      # on_value:
      #   then:
      #     - lvgl.label.update:
      #         id: pm10_value
      #         text: !lambda |-
      #           static char buffer[10];
      #           snprintf(buffer, sizeof(buffer), "%.01f", x);
      #           return buffer;       
    temperature:
      name: "SEN55 Temperature"
      accuracy_decimals: 1
      filters:
        - offset: !lambda return -1.0 * id(sen55_temperature_offset).state;
      on_value:
        then:
          - if:
              condition:
                lambda: "return temp_unit_changed;"
              then:
                - lvgl.label.update:
                    id: temperature_units
                    text: !lambda |-
                      if(id(display_temperature_unit).state == "Fahrenheit")
                        return "\u00B0F";
                      else if(id(display_temperature_unit).state == "Kelvin")
                        return "K";
                      return "\u00B0C";
                - globals.set:
                    id: temp_unit_changed
                    value: "false"
          - lvgl.label.update:
              id: temperature_value
              text: !lambda |-
                static char buffer[10];
                if(id(display_temperature_unit).state == "Fahrenheit")
                  snprintf(buffer, sizeof(buffer), "%.01f", (x * 9.0 / 5.0) + 32.0);
                else if(id(display_temperature_unit).state == "Kelvin")
                  snprintf(buffer, sizeof(buffer), "%.01f", x + 273.15);
                else
                  snprintf(buffer, sizeof(buffer), "%.01f", x);
                return buffer;
          - if:
              condition:
                lambda: "return x >= 18 && x <= 24;"  # Comfortable temperature range (Â°C)
              then:
                - lvgl.label.update:
                    id: temperature_value
                    text_color: my_black
              else:
                - lvgl.label.update:
                    id: temperature_value
                    text_color: my_red

    humidity:
      name: "SEN55 Humidity"
      filters:
        - lambda: return x - id(sen55_humidity_offset).state;
      accuracy_decimals: 0
      on_value:
        then:
          - lvgl.label.update:
              id: rh_value
              text: !lambda |-
                static char buffer[10];
                snprintf(buffer, sizeof(buffer), "%d", (int)x);
                return buffer;
          - if:
              condition:
                lambda: "return x >= 30 && x <= 50;"  # Optimal indoor comfort range (%)
              then:
                - lvgl.label.update:
                    id: rh_value
                    text_color: my_black
              else:
                - lvgl.label.update:
                    id: rh_value
                    text_color: my_red  # Very uncomfortable or potentially hazardous (%)                             
    voc:
      name: "SEN55 VOC"
      id: sen55_voc
      algorithm_tuning:
        #https://sensirion.com/media/documents/25AB572C/62B463AA/Sensirion_Engineering_Guidelines_SEN5x.pdf
        index_offset: 100
        learning_time_offset_hours: 72
        learning_time_gain_hours: 72
        gating_max_duration_minutes: 180
        std_initial: 50
        gain_factor: 230
      on_value:
        then:
          - lvgl.label.update:
              id: voc_value
              text: !lambda |-
                static char buffer[10];
                snprintf(buffer, sizeof(buffer), "%3d", (int)x);
                return buffer;
          - if:
              condition:
                lambda: "return x < 150;"
              then:
                - lvgl.label.update:
                    id: voc_value
                    text_color: my_black
              else:
                - lvgl.label.update:
                    id: voc_value
                    text_color: my_red                      
    i2c_id: lily_i2c
    address: 0x69
    update_interval: 10s

button:
  - platform: restart
    icon: mdi:power-cycle
    name: "ESP Reboot"

  - platform: factory_reset
    disabled_by_default: True
    name: "Factory Reset ESP"
    id: factory_reset_all

  - platform: template
    name: "Calibrate SCD40 To 420ppm"
    id: set_SCD40_calibrate
    on_press:
      - scd4x.perform_forced_calibration:
          value: 420
          id: scd40

  - platform: template
    name: "Clean SEN55"
    id: clean_sen55
    on_press:
      - sen5x.start_fan_autoclean: sen55

text_sensor:
    # Convert VOC Index To Text: 
    # https://sensirion.com/media/documents/02232963/6294E043/Info_Note_VOC_Index.pdf
    # https://sensirion.com/media/documents/ACD82D45/6294DFC0/Info_Note_Integration_VOC_NOx_Sensor.pdf
  - platform: template
    name: "VOC Quality"
    id: voc_quality
    icon: mdi:air-filter
    lambda: |-
      if (id(sen55_voc).state < 80) {
        return std::string("Improved");} 
      else if (id(sen55_voc).state < 150) {
        return std::string("Normal");} 
      else if (id(sen55_voc).state < 250) {
        return std::string("Abnormal");} 
      else if (id(sen55_voc).state < 400) {
        return std::string("Very abnormal");} 
      else {
        return std::string("Extremely abnormal");}   

light:
  - platform: esp32_rmt_led_strip
    id: rgb_light
    name: "Halo"
    pin: GPIO9
    default_transition_length: 0s
    chipset: WS2812
    num_leds: 11
    rgb_order: grb
    effects:
      - pulse:
          name: "Slow Pulse"
          transition_length: 500ms
          update_interval: 500ms
          min_brightness: 10%
          max_brightness: 50%
      - addressable_rainbow:
          name: Rainbow Effect
          speed: 10
          width: 50

# light:
#   - platform: esp32_rmt_led_strip
#     id: rgb_light
#     name: "Neopixel"
#     pin: GPIO21
#     default_transition_length: 0s
#     chipset: WS2812
#     num_leds: 1
#     rgb_order: rgb
#     effects:
#       - pulse:
#           name: "Slow Pulse"
#           transition_length: 500ms
#           update_interval: 500ms
#           min_brightness: 10%
#           max_brightness: 50%
#       - addressable_rainbow:
#           name: Rainbow Effect
#           speed: 50
#           width: 1

image:
  - file: https://yashmulgaonkar.github.io/assets/YM2_epd.png
    id: ym_logo
    type: RGB565

lvgl:
  displays: #296x128
    - epaper_display    
  buffer_size: 100%
  pages:            
    - id: main_page
      bg_color: my_white
      scrollbar_mode: "OFF"
      widgets:
# Wifi icon
        - label:
            id: wifi_stat
            align: CENTER
            text_font: montserrat_10
            text_color: my_red
            x: 40
            y: -140
            text: "\uF1EB"
# YM Logo                                
        - image:
            id: ym_image          
            src: ym_logo
            align: CENTER
            x: 55
            y: -140
# Time Value
        - label:
            id: timeVal
            align: LEFT_MID
            text_font: roboto12
            text_color: my_black
            x: 2
            y: -140
            text: "00:00AM"
# AQI box
        - obj:
            id: aqi_widget
            x: 0
            y: 16
            width: 127
            height: 40
            bg_color: my_black
            radius: 10
        - label:
            id: aqi_label
            align: LEFT_MID
            text_font: rubik524
            text_color: my_white
            x: 2
            y: -113
            text: "AQI:"
        - label:
            id: aqi_value
            align: LEFT_MID
            text_font: lato424
            text_color: my_white
            long_mode: WRAP
            x: 60
            y: -113
            text: "10"
# Temperature box
        - obj:
            x: 0
            y: 56
            width: 127
            height: 40
            bg_opa: TRANSP
            radius: 0
            border_color: my_black
            border_width: 1
            border_side: BOTTOM
        - label:
            id: tempStr
            align: LEFT_MID
            text_font: rubik414
            text_color: my_black
            x: 2
            y: -84
            text: "TEMP:"
        - label:
            id: temperature_units
            align: RIGHT_MID
            text_font: roboto12
            text_color: my_black
            x: 0
            y: -67
            text: "\u00B0F"
        - label:
            id: temperature_value
            align: RIGHT_MID
            text_font: lato424
            text_color: my_black
            long_mode: WRAP
            x: -30
            y: -67
            text: "74.9"            
# CO2 box                         
        - obj:
            x: 0
            y: 96
            width: 127
            height: 40
            bg_opa: TRANSP
            radius: 0
            border_color: my_black
            border_width: 1
            border_side: BOTTOM
        - label:
            id: CO2Str
            align: LEFT_MID
            text_font: rubik414
            text_color: my_black
            x: 2
            y: -44
            text: "CO2:"
        - label:
            id: CO2UnitStr
            align: RIGHT_MID
            text_font: roboto12
            text_color: my_black
            x: 0
            y: -27
            text: "PPM"
        - label:
            id: co2_value
            align: RIGHT_MID
            text_font: lato424
            text_color: my_black
            long_mode: WRAP
            x: -30
            y: -27
            text: "533"            
# PM25 box                          
        - obj:
            x: 0
            y: 136
            width: 127
            height: 40
            bg_opa: TRANSP
            radius: 0
            border_color: my_black
            border_width: 1
            border_side: BOTTOM
        - label:
            id: PM25Str
            align: LEFT_MID
            text_font: rubik414
            text_color: my_black
            x: 2
            y: -4
            text: "PM2.5:"
        - label:
            id: PM25UnitStr1
            align: RIGHT_MID
            text_font: roboto12
            text_color: my_black
            x: 0
            y: -2
            text: "ug"
        - line:
            points:
              - 110, 155
              - 128, 155
            line_width: 1
            line_color: my_black
        - label:
            id: PM25UnitStr2
            align: RIGHT_MID
            text_font: roboto12
            text_color: my_black
            x: 0
            y: 16
            text: "m3"
        - label:
            id: pm25_value
            align: RIGHT_MID
            text_font: lato424
            text_color: my_black
            long_mode: WRAP
            x: -30
            y: 13
            text: "1.8"            
# VOC box                                      
        - obj:
            x: 0
            y: 176
            width: 127
            height: 40
            bg_opa: TRANSP
            radius: 0
            border_color: my_black
            border_width: 1
            border_side: BOTTOM
        - label:
            id: VOCStr
            align: LEFT_MID
            text_font: rubik414
            text_color: my_black
            x: 2
            y: 36
            text: "VOC:"
        - label:
            id: VOCUnitStr
            align: RIGHT_MID
            text_font: roboto12
            text_color: my_black
            x: 0
            y: 53
            text: "IDX"
        - label:
            id: voc_value
            align: RIGHT_MID
            text_font: lato424
            text_color: my_red
            long_mode: WRAP
            x: -30
            y: 53
            text: "153"            
# CO box                                     
        - obj:
            x: 0
            y: 216
            width: 127
            height: 40
            bg_opa: TRANSP
            radius: 0
            border_color: my_black
            border_width: 1
            border_side: BOTTOM
        - label:
            id: COStr
            align: LEFT_MID
            text_font: rubik414
            text_color: my_black
            x: 2
            y: 76
            text: "CO:"
        - label:
            id: COUnitStr
            align: RIGHT_MID
            text_font: roboto12
            text_color: my_black
            x: 0
            y: 93
            text: "PPM"
        - label:
            id: co_value
            align: RIGHT_MID
            text_font: lato424
            text_color: my_black
            long_mode: WRAP
            x: -30
            y: 93
            text: "0.87"              
# RH box                         
        - obj:
            x: 0
            y: 256
            width: 127
            height: 40
            bg_opa: TRANSP
            radius: 0
            border_side: NONE
        - label:
            id: RHStr
            align: LEFT_MID
            text_font: rubik414
            text_color: my_black
            x: 2
            y: 116
            text: "RH:"
        - label:
            id: RHUnitStr
            align: RIGHT_MID
            text_font: roboto12
            text_color: my_black
            x: 0
            y: 133
            text: "%"
        - label:
            id: rh_value
            align: RIGHT_MID
            text_font: lato424
            text_color: my_black
            long_mode: WRAP
            x: -30
            y: 133
            text: "42"                                                                                                                                     